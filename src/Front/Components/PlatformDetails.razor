@using Tresorix.Contracts.Platforms
@using Front.Models
<h3>PlatformDetails</h3>

<table class="table">
    <thead>
    <tr>
        <th>Name</th>
        <th>TotalWallet</th>
        <th>TotalInvestment</th>
        <td>TotalProfit</td>
        <td>PercentageProfit</td>
        <td>Actions</td>
    </tr>
    </thead>
    <tbody>
    @foreach (var platform in Platforms)
    {
        <tr @onclick="() => OnLoadPlatformDetails.InvokeAsync(platform)">
            <td>@platform.Name</td>
            <td>@platform.TotalWallet</td>
            <td>@platform.TotalInvestment</td>
            <td>@platform.TotalProfit</td>
            <td>@platform.PercentageProfit</td>
            <td>
                <button class="btn btn-danger" @onclick:stopPropagation @onclick="() => OnDelete.InvokeAsync(platform.Id)">Delete</button>
            </td>
        </tr>
    }

    @if (IsAdding)
    {
        <tr>
            <td>
                <input @bind="NewPlatform.Name" placeholder="Enter name" class="form-control"/>
            </td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td>
                <button class="btn btn-danger" @onclick="OnCancelAdd">Cancel</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@if (!IsAdding)
{
    <button class="btn btn-primary" @onclick="OnAdd">Add Platform</button>
}
else
{
    <button class="btn btn-success" @onclick="OnSave">Save Platform</button>
}

@code {
    [Parameter] public required List<Platform> Platforms { get; set; }
    [Parameter] public EventCallback<Platform> OnLoadPlatformDetails { get; set; }
    [Parameter] public required bool IsAdding { get; set; }
    [Parameter] public required Platform NewPlatform { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancelAdd { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public EventCallback<Guid> OnDelete { get; set; }
}