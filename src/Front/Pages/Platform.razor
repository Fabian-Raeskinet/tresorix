@page "/platforms"
@inject IPlatformService PlatformService
@inject IAssetService AssetService
@using Front.Components
@using Front.Services
@using Tresorix.Contracts.Platforms

<PageTitle>Platforms</PageTitle>

<h1>Platforms</h1>

@if (_platforms == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <PlatformDetails Platforms="@_platforms.ToList()" OnLoadPlatformDetails="LoadPlatformDetails"></PlatformDetails>
    if (_selectedPlatform is not null)
    {
        <AssetDetails Assets="@_selectedPlatform.Assets"
                      OnSave="SaveAsset"
                      OnAdd="ToggleAddAsset"
                      OnCancelAdd="CancelAdding"
                      OnDelete="DeleteAsset"
                      NewAsset="@_newAsset"
                      IsAdding="@_isAddingAsset">
        </AssetDetails>
        <TransactionDetails Transactions="@_selectedPlatform.Transactions"></TransactionDetails>

        @if (_predictions is not null)
        {
            <PlatformPredictionDetails PlatformPredictions="@_predictions.ToList()"></PlatformPredictionDetails>
        }
    }
}

@code {
    private List<Front.Models.Platform>? _platforms;
    private Front.Models.Platform? _selectedPlatform;
    private List<PlatformPredictionResponse>? _predictions;
    private Front.Models.Asset _newAsset = new();
    private bool _isAddingAsset;

    protected override async Task OnInitializedAsync()
    {
        _platforms = await PlatformService.GetAllAsync();
    }

    private async Task LoadPlatformDetails(Front.Models.Platform platform)
    {
        var years = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        var query = string.Join("&", years.Select(year => $"years={year}"));
        _selectedPlatform = platform;
        _predictions = await PlatformService.GetPredictionByPlatformId(_selectedPlatform.Id, query);
    }

    private void ToggleAddAsset()
    {
        _isAddingAsset = !_isAddingAsset;
        _newAsset = new Front.Models.Asset();
    }

    private async Task SaveAsset()
    {
        if (_selectedPlatform is not null)
        {
            await AssetService.CreateNewAssetAsync(_newAsset, _selectedPlatform.Id);

            var createdAsset = await AssetService.GetByTickerAsync(_newAsset.Ticker!);
            if (createdAsset != null) _selectedPlatform?.Assets.Add(createdAsset);
        }

        ToggleAddAsset();
    }

    private void CancelAdding()
    {
        ToggleAddAsset();
    }
    

    private async Task DeleteAsset(Guid assetId)
    {
        await AssetService.DeleteAsset(assetId);

        var assetToRemove = _selectedPlatform?.Assets.FirstOrDefault(a => a.Id == assetId);
        if (assetToRemove is not null)
        {
            _selectedPlatform?.Assets.Remove(assetToRemove);
        }
    }

}