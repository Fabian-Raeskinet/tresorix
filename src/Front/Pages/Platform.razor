@page "/platforms"
@using Front.Components
@using Front.Models
@using Tresorix.Contracts.Assets
@using Tresorix.Contracts.Platforms
@inject HttpClient Http

<PageTitle>Platforms</PageTitle>

<h1>Platforms</h1>

@if (_platforms == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <PlatformDetails Platforms="@_platforms.ToList()" OnLoadPlatformDetails="LoadPlatformDetails"></PlatformDetails>
    if (_selectedPlatform is not null)
    {
        <AssetDetails Assets="@_selectedPlatform.Assets"
                      OnSave="SaveAsset"
                      OnAdd="ToggleAddAsset"
                      NewAsset="@_newAsset"
                      IsAdding="@_isAddingAsset">
        </AssetDetails>
        <TransactionDetails Transactions="@_selectedPlatform.Transactions"></TransactionDetails>

        @if (_predictions is not null)
        {
            <PlatformPredictionDetails PlatformPredictions="@_predictions.ToList()"></PlatformPredictionDetails>
        }
    }
}

@code {
    private PlatformResponse[]? _platforms;
    private PlatformResponse? _selectedPlatform;
    private PlatformPredictionResponse[]? _predictions;
    private NewAsset _newAsset = new();
    private bool _isAddingAsset;

    protected override async Task OnInitializedAsync()
    {
        _platforms = await Http.GetFromJsonAsync<PlatformResponse[]>("api/Platform");
    }

    private async Task LoadPlatformDetails(PlatformResponse platform)
    {
        var years = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        var query = string.Join("&", years.Select(year => $"years={year}"));
        _predictions = await Http.GetFromJsonAsync<PlatformPredictionResponse[]>($"api/Platform/{platform.Id}?{query}");

        _selectedPlatform = platform;
    }

    private void ToggleAddAsset()
    {
        _isAddingAsset = !_isAddingAsset;
        _newAsset = new NewAsset();
    }

    private async Task SaveAsset()
    {
        if (string.IsNullOrEmpty(_newAsset.Name) || string.IsNullOrEmpty(_newAsset.Ticker))
            return;

        var newAssetCommand = new CreateNewAssetCommand
        {
            Name = _newAsset.Name,
            Ticker = _newAsset.Ticker,
            ActualValue = _newAsset.ActualValue,
            AverageYearlyPerformancePercent = _newAsset.AverageYearlyPerformancePercent,
            PlatformId = _selectedPlatform!.Id
        };
        var response = await Http.PostAsJsonAsync("api/Asset", newAssetCommand);
        if (response.IsSuccessStatusCode)
        {
            _newAsset = new NewAsset();
            _platforms = await Http.GetFromJsonAsync<PlatformResponse[]>("api/Platform");
        }
    }

}